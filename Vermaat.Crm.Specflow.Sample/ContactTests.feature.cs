// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Vermaat.Crm.Specflow.Sample
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("ContactTests", Description="Some tests specific to the contact entity. \r\nUsed to show tests that use unusual " +
        "fields like the address and composite fields", SourceFile="ContactTests.feature", SourceLine=0)]
    public partial class ContactTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ContactTests.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ContactTests", "Some tests specific to the contact entity. \r\nUsed to show tests that use unusual " +
                    "fields like the address and composite fields", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Basic contact test", new string[] {
                "API",
                "Cleanup"}, SourceLine=5)]
        public virtual void BasicContactTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basic contact test", null, new string[] {
                        "API",
                        "Cleanup"});
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table1.AddRow(new string[] {
                        "First Name",
                        "John"});
            table1.AddRow(new string[] {
                        "Last Name",
                        "Smith"});
            table1.AddRow(new string[] {
                        "Job Title",
                        "CLO"});
#line 7
testRunner.Given("a contact named TestContact with the following values", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table2.AddRow(new string[] {
                        "First Name",
                        "Jerry"});
            table2.AddRow(new string[] {
                        "Job Title",
                        "Chief Lazyness Officer"});
#line 12
testRunner.When("TestContact is updated with the following values", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table3.AddRow(new string[] {
                        "First Name",
                        "Jerry"});
            table3.AddRow(new string[] {
                        "Last Name",
                        "Smith"});
            table3.AddRow(new string[] {
                        "Job Title",
                        "Chief Lazyness Officer"});
#line 16
testRunner.Then("TestContact has the following values", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Lookup with multiple results tests", new string[] {
                "Chrome",
                "Cleanup"}, SourceLine=22)]
        public virtual void LookupWithMultipleResultsTests()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lookup with multiple results tests", null, new string[] {
                        "Chrome",
                        "Cleanup"});
#line 23
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table4.AddRow(new string[] {
                        "Account Name",
                        "DynamicHands"});
            table4.AddRow(new string[] {
                        "Main Phone",
                        "0612345678"});
            table4.AddRow(new string[] {
                        "Website",
                        "https://dynamichands.nl"});
            table4.AddRow(new string[] {
                        "Industry",
                        "Consulting"});
#line 24
testRunner.Given("an account named FirstAccount with the following values", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table5.AddRow(new string[] {
                        "Account Name",
                        "DynamicHands"});
            table5.AddRow(new string[] {
                        "Main Phone",
                        "0612345678"});
            table5.AddRow(new string[] {
                        "Website",
                        "https://dynamichands.nl"});
            table5.AddRow(new string[] {
                        "Industry",
                        "Consulting"});
#line 30
testRunner.And("an account named SecondAccount with the following values", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table6.AddRow(new string[] {
                        "First Name",
                        "Jerry"});
            table6.AddRow(new string[] {
                        "Last Name",
                        "Smith"});
            table6.AddRow(new string[] {
                        "Company Name",
                        "SecondAccount"});
            table6.AddRow(new string[] {
                        "Email",
                        "someone@test.com"});
#line 36
testRunner.When("a contact named TestLookup is created with the following values", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table7.AddRow(new string[] {
                        "First Name",
                        "Jerry"});
            table7.AddRow(new string[] {
                        "Last Name",
                        "Smith"});
            table7.AddRow(new string[] {
                        "Company Name",
                        "SecondAccount"});
            table7.AddRow(new string[] {
                        "Email",
                        "someone@test.com"});
#line 42
testRunner.Then("TestLookup has the following values", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
