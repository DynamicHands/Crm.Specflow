// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Vermaat.Crm.Specflow.Sample
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("OpportunityTests", SourceFile="OpportunityTests.feature", SourceLine=0)]
    public partial class OpportunityTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OpportunityTests.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OpportunityTests", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void WinningAnOpportunity(string status, string statusReason, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "API",
                    "Chrome",
                    "Cleanup"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Winning an opportunity", null, @__tags);
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table71.AddRow(new string[] {
                        "Account Name",
                        "TestAccount"});
#line 6
testRunner.Given("an account named TestAccount with the following values", ((string)(null)), table71, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table72.AddRow(new string[] {
                        "Topic",
                        "Test Opp Money"});
#line 9
testRunner.And("a related opportunity from TestAccount named TestOpp with the following values", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table73.AddRow(new string[] {
                        "Status Reason",
                        string.Format("{0}", statusReason)});
#line 12
testRunner.When("the opportunity TestOpp is closed with the following values", ((string)(null)), table73, "When ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table74.AddRow(new string[] {
                        "Topic",
                        "Test Opp Money"});
            table74.AddRow(new string[] {
                        "Status",
                        string.Format("{0}", status)});
            table74.AddRow(new string[] {
                        "Status Reason",
                        string.Format("{0}", statusReason)});
#line 15
testRunner.Then("TestOpp has the following values", ((string)(null)), table74, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Winning an opportunity, Won", new string[] {
                "API",
                "Chrome",
                "Cleanup"}, SourceLine=22)]
        public virtual void WinningAnOpportunity_Won()
        {
#line 5
this.WinningAnOpportunity("Won", "Won", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Winning an opportunity, Lost", new string[] {
                "API",
                "Chrome",
                "Cleanup"}, SourceLine=22)]
        public virtual void WinningAnOpportunity_Lost()
        {
#line 5
this.WinningAnOpportunity("Lost", "Canceled", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
